---
title: "nbdev Tutorial"
description: "An outline and list of materials for the nbdev tutorial"
---

## Resources For This Tutorial

- The [slides](https://docs.google.com/presentation/d/1Ri4m4KxXaR5rH-zMM_EGZNhupj0SlpiSac2jAhpFpyI/edit?usp=sharing) for this talk.
- The [GitHub repo](https://github.com/fastai/jupytercon-2023) with all of the examples and the source code for this site.

## Optional Pre-requisites

_Optional because it's best to watch and try this yourself at home._

1. Install [Quarto](https://quarto.org/docs/get-started/).
2. Install [JupyterLab](https://jupyterlab.readthedocs.io/en/stable/getting_started/installation.html) with `pip install jupyterlab`.
3. Install [nbdev](https://nbdev.fast.ai/) with `pip install nbdev`.
4. Install the [nbdev VSCode extension](https://marketplace.visualstudio.com/items?itemName=hamelhusain.nbdev) [^1].
5. Optionally, install the [github cli](https://cli.github.com/).

## 1. Intro (20 minutes)

Motivation for nbdev -- literate & exploratory programming ([slides](https://docs.google.com/presentation/d/1Ri4m4KxXaR5rH-zMM_EGZNhupj0SlpiSac2jAhpFpyI/edit?usp=sharing)).

## 2. Quarto Walkthrough (40 minutes)

- Create a new project using `quarto project create`, see the [_quarto.yml](https://github.com/fastai/jupytercon-2023/tree/main/_quarto_demo/_quarto.yml) file.
- [basics.ipynb](https://github.com/fastai/jupytercon-2023/tree/main/_quarto_demo/basics.ipynb)
    - No execution by default
- [cell-options.qmd](https://github.com/fastai/jupytercon-2023/blob/main/_quarto_demo/cell-options.qmd)
    - The qmd format is interesting and mirrors the experience of RStudio to a large extent
    - Running cells: 
        - `CMD + SHIFT + Enter`
        - Jupyter cache (pip install Jupyter Cache)
    - Change value in cell (execution by default vs. notebooks not executing by default)
    - Quarto: Assist Panel, show how it works (only in `.qmd` now)
    - Customizing output
        - Code cell options:
            - `echo: true|false|fenced`
            - `include: false`
            - `output: true|false|asis`
        - Front matter
            - `code-fold: true`
            - `code-tools: true`
        - Other [important cell options](https://quarto.org/docs/reference/cells/cells-jupyter.html#overview)
        - General [HTML options](https://quarto.org/docs/output-formats/html-basics.html)
    - Hotkeys: 
        - `CMD + SHIFT + O`; outline navigator
        - `CMD  + T`; see tags (project wide)
- Other VSCode extension features
    - [Options](https://quarto.org/docs/tools/vscode.html)
    - [Visual mode](https://quarto.org/docs/visual-editor/vscode/)
        - Editor Toolbar: makes **authoring tables** so much nicer than plain markdown!
- Different formats
    - [msword.ipynb](https://github.com/fastai/jupytercon-2023/tree/main/_quarto_demo/msword.ipynb)
    - [presentation.ipynb](https://github.com/fastai/jupytercon-2023/tree/main/_quarto_demo/presentation.ipynb)
    - [pdf.ipynb](https://github.com/fastai/jupytercon-2023/tree/main/_quarto_demo/pdf.ipynb)
- Some of my favorite features
    - [annotation.qmd](https://github.com/fastai/jupytercon-2023/tree/main/_quarto_demo/annotation.qmd)
        - You can make multi-line by commenting twice
    - Conditional formatting
        - Show locally in VSCode: [nbdev/nbs/getting_started.ipynb](https://github.com/fastai/nbdev/blob/master/nbs/getting_started.ipynb).
        - Notice special cell tags that let you know when something is visible
    - Testing your docs by executing code:
        - Set `execute: enabled: true` in _quarto.yml or pass the`â€”execute` flag to quarto
        - Use the `execution: freeze: true` if you need to opt a notebook out of execution. [reference](https://quarto.org/docs/computations/caching.html#disabling-execution).
        - The Jupyter cache can be helpful while developing: [reference](https://quarto.org/docs/computations/caching.html#jupyter-cache).
    - External listings [example](https://github.com/hamelsmu/hamel/blob/master/index.qmd#L16) | [docs](https://quarto.org/docs/websites/website-listings-custom.html#metadata-file-listings). 
    - Notes/TILs:
        - [Hamel's notes](https://hamel.dev/notes/) | [Wasim's TILs](https://wasimlorgat.com/tils/)
    - Notebook filters:
        - [example](https://github.com/hamelsmu/hamel/blob/master/quarto_filter.py) | [docs](https://quarto.org/docs/extensions/nbfilter.html)
- Publishing & Previewing
    - `quarto publish`
    - `quarto render` followed by `netlify`
    - Official [Quarto GitHub Actions](https://github.com/quarto-dev/quarto-actions).
        - [example](./gha.qmd)
- Configuration: `_quarto.yml`, front matter etc
    - Global options: `_quarto.yml`: [docs](https://quarto.org/docs/websites/index.html#config-file)
    - Page front matter: [docs](https://quarto.org/docs/output-formats/html-basics.html)
    - Overriding global options per directory: [docs](https://quarto.org/docs/projects/quarto-projects.html#directory-metadata)
    - Repeatable options: [listing_meta](https://github.com/hamelsmu/hamel/blob/master/notes/_listing_meta.yml) and merging that with `metadata-files` [front matter]](https://github.com/hamelsmu/hamel/blob/master/notes/quarto/index.qmd)
- Shiny Live
    - TODO: add example.
- Where to get help:
    - The quarto website [repo](https://github.com/quarto-dev/quarto-web).
    - Example [gallery](https://quarto.org/docs/gallery/).

[^1]: This will automatically install the [Python](https://marketplace.visualstudio.com/items?itemName=ms-python.python) and [Quarto](https://marketplace.visualstudio.com/items?itemName=quarto.quarto) extensions as well.

## 3. nbdev Walkthrough (60 minutes)



## Additional Reading

- [nbdev docs](https://nbdev.fast.ai/)
- [Quarto docs](https://quarto.org/docs/)
- [About](./about.qmd) the instructors.
